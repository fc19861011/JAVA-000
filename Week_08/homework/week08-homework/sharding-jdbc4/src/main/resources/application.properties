spring.shardingsphere.datasource.names=ds0,ds1
#ds0 配置
spring.shardingsphere.datasource.ds0.jdbc-url=jdbc:mysql://localhost:3306/mail_test?serverTimezone=UTC&useSSL=false
spring.shardingsphere.datasource.ds0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds0.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds0.username=root
spring.shardingsphere.datasource.ds0.password=root
#ds1 配置
spring.shardingsphere.datasource.ds1.jdbc-url=jdbc:mysql://localhost:3307/mail_test?serverTimezone=UTC&useSSL=false
spring.shardingsphere.datasource.ds1.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.ds1.driver-class-name=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.ds1.username=root
spring.shardingsphere.datasource.ds1.password=root
# 分库策略 根据id取模确定数据进哪个数据库
spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=ds$->{(order_id.intdiv(15)) % 2}

# 具体分表策略
# 节点 ds0.order_info0,ds0.order_info1... ...
spring.shardingsphere.sharding.tables.order_info.actual-data-nodes=ds$->{0..1}.order_info$->{0..2}
# 分表字段id
spring.shardingsphere.sharding.tables.order_info.table-strategy.inline.sharding-column=order_id


# 分表策略 根据id取模,确定数据最终落在那个表中
spring.shardingsphere.sharding.tables.order_info.table-strategy.inline.algorithm-expression = order_info$->{order_id % 16}
# 使用SNOWFLAKE算法生成主键
spring.shardingsphere.sharding.tables.order_info.key-generator.column = order_id
spring.shardingsphere.sharding.tables.order_info.key-generator.type = SNOWFLAKE
#spring.shardingsphere.sharding.binding-tables=t_order


spring.shardingsphere.props.sql-show=true